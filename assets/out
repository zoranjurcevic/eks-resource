#!/usr/bin/env bash

# For the full copyright and license information, please view the LICENSE
# file that was distributed with this source code.

set -e
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

# Set TMPDIR environment variable to /tmp if it does not defined
export TMPDIR="${TMPDIR:-/tmp}"

# shellcheck source=assets/common.sh
source "$(dirname "$0")/common.sh"

# Print the last exit code if it isn't 0 when this process exits
trap 'on_exit' EXIT

# The first argument is a path to the directory containing the build's full set of sources.
source_dir=$1
cd "$source_dir"

payload=$(mktemp "$TMPDIR/kubernetes-resource-request.XXXXXX")
cat > "$payload" <&0

AWS_ACCESS_KEY_ID=$(jq -r '.source.aws_access_key_id // ""' < "$payload")
export AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY=$(jq -r '.source.aws_secret_access_key // ""' < "$payload")
export AWS_SECRET_ACCESS_KEY
AWS_SESSION_TOKEN=$(jq -r '.source.aws_session_token // ""' < "$payload")
export AWS_SESSION_TOKEN

setup_kubectl "$payload"

# Optional. Specify the operation that you want to perform on one or more
# resources, for example apply, delete, label.
kubectl_command="$(jq -r '.params.kubectl // ""' < "$payload")"
load_kcommand=" " read -r -a kubectl_arguments <<< "$(eval "echo $kubectl_command")"
exe kubectl "${kubectl_arguments[@]}"

# Optional. Specify the operation that you wish to perform with AWS resources.
aws_command="$(jq -r '.params.aws // ""' < "$payload")"
load_acommand=" " read -r -a aws_arguments <<< "$(eval "echo $aws_command")"
exe aws "${aws_arguments[@]}"

# Check for input operations
if [[ -z "$kubectl_command" ]] || [[ -z "$aws_command" ]]; then
  echoerr 'kubectl or aws must be specified in params.'
  exit 1
fi

# Optional. The number of seconds that waits until all pods are ready. Defaults to `0`.
wait_until_ready="$(jq -r '.params.wait_until_ready // 0' < "$payload")"
# Optional. The interval (sec) on which to check whether all pods are ready or not. Defaults to `3`.
wait_until_ready_interval="$(jq -r '.params.wait_until_ready_interval // 3' < "$payload")"
# Optional. A label selector to identify a set of pods which to check whether those are ready. Defaults to every pods in the namespace.
wait_until_ready_selector="$(jq -r '.params.wait_until_ready_selector // ""' < "$payload")"

if [[ "$wait_until_ready" -ne 0 ]]; then
  wait_until_pods_ready "$wait_until_ready" "$wait_until_ready_interval" "$wait_until_ready_selector"
fi

jq --arg kubectl "$kubectl_command" \
   --arg namespace "$(current_namespace)" \
   --arg cluster "$(current_cluster)" \
    -n '{
  "version": {
    "kubectl": $kubectl
  },
  "metadata": [
    {"name": "namespace", "value": $namespace},
    {"name": "cluster", "value": $cluster}
  ]
}' >&3
